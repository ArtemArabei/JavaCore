public class Шпаргалки {
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Типы данных:
Тип	        Размер в байтах	Размер в битах	Возможные значения (от..до)	                                Значение по умолчанию
boolean	    —	            1	            true или false	                                            false
byte	    1 	            8 	            -128..   127	                                            0
short	    2 	            16 	            -32,768..   32,767	                                        0
int	        4	            32 	            -2,147,483,648..   2,147,483,647	                        0
long	    8	            64          	-9,223,372,036,854,775,808..   9,223,372,036,854,775,807	0
char	    2	            16	            0..   65,535	                                            '\u0000'
float	    4	            32	            -3.4E+38..   3.4E+38 (стандарт IEEE 754)	                0.0
double	    8	            64	            -1.7E+308..   1.7E+308 (стандарт IEEE 754)	                0.0         */
    /*-----------------------------------------------------------------------------------------------------------------*/
//          Модификаторы доступа:
//          private  - видимость в рамках класса.
//          protected – видимость в рамках пакета и наследников.
//          default - видимость в рамках пакета.
//          public – видимость для всех
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          public static void main(String[] args) {
}           этот метод является точкой входа в программу                                                            */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Создание объекта (экземпляра класса):
            new House();
            Присвоение переменной ссылки на объекта (экземпляра класса:
            House  house = new House();                                                                             */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Вызов методов:
            House  house = new House();
            house.setTemperature(18);
            house.getTemperature();                                                                                 */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Основные арифметические операторы:
            Операция    	Описание
            +	            Сложение (а также унарный плюс)
            -	            Вычитание (а также унарный минус)
            *	            Умножение
            /	            Деление
            %	            Деление по модулю*/
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Составные арифметические операции с присваиванием:
            Операция    	Описание
            +=	            Сложение с присваиванием
            -=	            Вычитание с присваиванием
            *=	            Умножение с присваиванием
            /=	            Деление с присваиванием
            %=	            Деление по модулю с присваиванием*/
    /*-----------------------------------------------------------------------------------------------------------------*/
            /*Операторы сравнения:
            Оператор	    Описание
            ==	            Равно
            !=	            Неравно
            >	            Больше
            <	            Меньше
            >=	            Больше или равно
            <=	            Меньше или равно*/
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Инкремент и декремент:
            х++;            Увеличение на 1 (то же, что х = х + 1;)
            х--;            Уменьшение на 1 (то же, что х = х - 1;*/
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Логические операторы:
            Операция    	Описание
            &	            Логическая операция И (AND) или конъюнкция
            |	            Логическая операция ИЛИ (OR) или дизъюнкция
            ^	            Логическая операция исключающее ИЛИ (XOR)
            !	            Логическая унарная операция НЕ (NOT)
            ||	            Укороченная логическая операция ИЛИ (short-circuit)
            &&	            Укороченная логическая операция И (short-circuit)
            ==	            Равенство
            !=	            Неравенство
            &=	            Логическая операция И с присваиванием
            |=	            Логическая операция ИЛИ с присваиванием
            ^=	            Логическая операция исключающее ИЛИ с присваиванием*/
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Тернарный оператор:
            используется вместо оператора if-else
            Общая форма тернарного оператора:
            выражение1 ? выражение2 : выражение3
            например
            k = i < 0 ? -i : i;                                                                                    */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Оператор присваивания:
            переменная = выражение;
            например:
            х = у = z = 100;                                                                                      */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Приоритет операций:
            1.      ]	    ()	    .
            2.      ++	    --	    ~	    !	    +(унарная)	    - (унарная)	    (приведение типов)
            3.      *	    /	    %
            4.      +	    -
            5.      >>	    >>>	    <<
            6.      >	    >=	    <	    <=	    instanceof
            7.      ==	    !=
            8.      &
            9.      ^
            10.     |
            11.     &&
            12.     ||
            13.     ? :
            14.     ->
            15      =                                                                                            */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Побитовые (поразрядные) операции
            Операция        Описание
            ~               Поразрядная унарная операция НЕ (дополнение)
            &               Поразрядная логическая операция И (AND, побитовая конъюнкция)
            |               Поразрядная логическая операция ИЛИ (OR, побитовая дизъюнкция)
            ^               Поразрядная логическая операция исключающее ИЛИ (XOR)*/
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Операторы управления:

            Оператор if:

            if (условие) {
               	оператор1;
            } else {
               	оператор2;
            }                                                                                                               */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Оператор switch:

            switch (выражение) {
                case значение1:
                    операторы;
                    break;
                case значение2:
                    операторы;
                    break;
            default:
                операторы;
            }                                                                                                       */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Циклы в java:
            тип «пока» - предназначен для повторения какого-то действия до тех пор, пока выполняется некоторое условие
            тип «n-раз» - предназначен для повторения каких-то действий заранее известное количество раз                                                                                             */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Пример цикла while:
            int i = 1;
            while (i < 5) {
            System.out.println(”i = ” + i);
            i++;
            }                                                                                                       */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Пример цикла do…while
            int n = 5;
	        do {
            System.out.println("Sample : " + n);
            n--;
            } while (n > 0);                                                                                                */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Пример цикла For:
            for (int i = 0; i < 5; i++) {
                System.out.println("Count is: " + i);
            }                                                                                                       */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Оператор  break:
            По мере необходимости выполнение цикла можно немедленно прекратить его.
            Для этой цели используется выражение break.
            Если оно встречается в цикле, то цикл завершается и управление передается выражению, следующему после цикла.    */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          while (i <= 28) {
                if (i % 13 == 0) {
                    break;
                }
                i++;
            }
            System.out.println(“First number is : “ + i);*/
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Оператор  continue:
            Существует возможность преждевременно завершить очередную итерацию цикла,
            нарушив нормальный ход выполнения команд.
            Это позволяет сделать оператор continue.
            Данный оператор вызывает принудительный переход на следующую итерацию цикла,
            причем все последующие операторы игнорируются.*/
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          for (int i = 1; i < 5; i++) {
                if (i == 3) {
                    System.out.println("continue!");
                    continue;
                }
                System.out.println(“i = “ + i);
            }                                                                                                       */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Оператор  return
            Существует возможность преждевременно завершить очередную итерацию цикла
            выйдя из тела метода используя return                                                                   */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          for (int i = 1; i <= count; i++) {
                System.out.println(i);
                if (i == 5) return;
            }
            System.out.println(“Сюда программа не дошла”);*/
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Объявление массивов:
            int[] array;
            int array[]; (можно и так, и так)
            Инициализация массивов:
            array = new int[10];
            Начальная инициализация массива (сразу и объявили, и инициализировали):
            int[] array = {1,2,3,4,5};                                                                              */
    /*-----------------------------------------------------------------------------------------------------------------*/
    /*          array.length - размер массива array                                                                     */
    /*-----------------------------------------------------------------------------------------------------------------*/
/*          Для данных типа String:
            \n - перевод строки
            \t - табуляция
            \r - возврат каретки                                                                                    */
    /*-----------------------------------------------------------------------------------------------------------------*/
    /*      Принципы ООП

            Абстракция — отделение концепции от ее реализации;
            Полиморфизм — это способность объекта принимать различные формы;
            Наследование — способность объекта базироваться на другом объекте;
            Инкапсуляция —разграничения доступа к объектам и классам.*/
    /*-----------------------------------------------------------------------------------------------------------------*/

}


